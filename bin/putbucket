#!/usr/bin/env node
// -*- mode: js -*-
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2017, Joyent, Inc.
 */

var cmdutil = require('cmdutil');
var moray = require('../lib');
var moraycli = require('../lib/cmd');

var clientOptions, parser, client;
var bucket, putOptions, v;
var useStdin = false;

/*
 * Reads the bucket configuration from stdin and invokes "next" upon completion.
 * Failure will abort the program with an appropriate message.
 */
function readFromStdin(next) {
    var config;

    config = '';
    process.stdin.setEncoding('utf8');
    process.stdin.resume();
    process.stdin.on('data', function (chunk) {
        config += chunk;
    });

    process.stdin.on('end', function () {
        function evalFn(f) {
            var fn;
            fn = eval('fn = ' + f);
            return (fn);
        }

        config = JSON.parse(config);
        config.pre = (config.pre || []).map(evalFn);
        config.post = (config.post || []).map(evalFn);
        putOptions = config;
        next();
    });
}

/*
 * Executes the body of this command: connects to Moray and invokes putBucket().
 */
function putBucket() {
    client = moray.createClient(clientOptions);
    client.on('error', cmdutil.fail);
    client.on('connect', function onConnect() {
        client.putBucket(bucket, putOptions, function callback(err) {
            if (err) {
                cmdutil.fail(err);
            }
            client.close();
        });
    });
}

/*
 * Parse (and apply) the "-i" or "-u" command-line option.
 */
function addIndex(indexObj, arg, unique) {
    var tmp;

    tmp = arg.split(':', 2);
    indexObj[tmp[0]] = {
        type: tmp[1] || 'string',
        unique: unique
    };
}

cmdutil.configure({
    'usageMessage': 'create or update a Moray bucket',
    'synopses': [ [
        moraycli.commonUsage, '[-i field:type ...]', '[-u field:type ...]',
        '[-x version]', '[-st]', 'BUCKET'
    ].join(' ') ]
});

clientOptions = {};
putOptions = {
    'index': {},
    'options': {}
};
parser = moraycli.parseCliOptions({
    'argv': process.argv,
    'env': process.env,
    'errstream': process.stderr,
    'extraOptStr': 'i:stu:x:',
    'clientOptions': clientOptions,
    'onUsage': cmdutil.usage,
    'onOption': function (option) {
        switch (option.option) {
        case 'i':
            addIndex(putOptions.index, option.optarg, false);
            break;

        case 's':
            useStdin = true;
            break;

        case 't':
            putOptions.options.trackModification = true;
            break;

        case 'u':
            addIndex(putOptions.index, option.optarg, true);
            break;

        case 'x':
            v = parseInt(option.optarg, 10);
            if (isNaN(v) || v < 0) {
                cmdutil.usage('unsupported value for -x: "%s"', option.optarg);
            }
            putOptions.options.version = v;
            break;

        default:
            cmdutil.usage();
            break;
        }
    }
});

if (parser.optind() >= process.argv.length)
    cmdutil.usage('missing required argument: "bucket"');
bucket = process.argv[parser.optind()];

if (useStdin) {
    readFromStdin(putBucket);
} else {
    putBucket();
}
