.TH findobjects 1 "December 2016" Moray "Moray Client Tools"
.SH NAME
.PP
findobjects \- fetch the contents of multiple objects using a filter
.SH SYNOPSIS
.PP
\fB\fCfindobjects [COMMON_OPTIONS] [\-Hns] [\-a FIELD] [\-d FIELD] [\-l LIMIT] [\-o OFFSET] BUCKET FILTER\fR
.SH DESCRIPTION
.PP
Fetches objects from bucket \fB\fCBUCKET\fR whose properties match the filter \fB\fCFILTER\fR\&.
Matching objects are printed as JSON objects similar to the \fB\fCgetobject\fR command,
with properties \fB\fCbucket\fR, \fB\fCkey\fR, \fB\fCvalue\fR, \fB\fC_id\fR, and \fB\fC_etag\fR\&.  This command also
provides an additional JSON property on each object:
.PP
\fB\fC_count\fR
    A count of total objects matching this filter on the server.  See the
    important caveats below.
.PP
\fB\fCfindobjects\fR operations are always bounded in size.  See the \fB\fC\-l LIMIT\fR option.
You must use multiple invocations using the \fB\fC\-l LIMIT\fR and \fB\fC\-o OFFSET\fR options
(called \fIpagination\fP) to process arbitrarily large sets of objects.
.PP
\fB\fCFILTER\fR is an LDAP\-like filter string.  For example, this filter matches
objects having property "hostname" with value "wormhole":
.PP
.RS
.nf
(hostname=wormhole)
.fi
.RE
.PP
This filter matches objects having a "unix_timestamp" property at most
1482438844:
.PP
.RS
.nf
(unix_timestamp<=1482438844)
.fi
.RE
.PP
This filter matches objects meeting both constraints:
.PP
.RS
.nf
(&(hostname=wormhole)(unix_timestamp<=1482438844))
.fi
.RE
.PP
And this filter matches objects meeting either one:
.PP
.RS
.nf
(|(hostname=wormhole)(unix_timestamp<=1482438844))
.fi
.RE
.PP
In order to avoid expensive table scans, Moray requires that filter strings use
at least one of the bucket's indexed fields in a way that could prune results
(e.g., not just on one side of an "OR" clause).  Note that you can still
construct filters that require table scans (e.g., \fB\fC(hostname=*)\fR), and
reasonable\-looking filters can still behave pathologically.  Performance depends
significantly on the behavior of the underlying data store.  The requirement
around indexed fields is a heuristic to prevent obviously\-pathological behavior,
not a guarantee of good behavior.
.PP
Filters can include both indexed and unindexed fields, but \fBusing unindexed
fields in filters is strongly discouraged.\fP  They cannot be used correctly with
pagination (the \fB\fC\-o OFFSET\fR and \fB\fC\-l LIMIT\fR options) and they do not produce
correct values for \fB\fC_count\fR\&.  Attempting to use these options with filters that
use unindexed fields often results in truncated result sets.
.SH OPTIONS
.PP
\fB\fC\-a FIELD\fR
    Sort results in ascending order by indexed field \fB\fCFIELD\fR\&.
.PP
\fB\fC\-d DESC\fR
    Sort results in descending order by indexed field \fB\fCFIELD\fR\&.
.PP
\fB\fC\-H\fR
    Print objects using minimal JSON with one object per line (instead of
    inserting newlines within objects and indenting for readability)
.PP
\fB\fC\-l LIMIT\fR
    Return at most \fB\fCLIMIT\fR objects.  With \fB\fC\-o OFFSET\fR, this can be used to page
    through a large result set.  However, this interacts badly with filters on
    undexed fields as described above.  If this option is unspecified, a default
    limit is provided (which is currently 1000).
.PP
\fB\fC\-n\fR
    Do not report the \fB\fC_count\fR field with each object.  (This also skips
    executing the underlying query on the server to perform the count.)
.PP
\fB\fC\-o OFFSET\fR
    Skip the first \fB\fCOFFSET\fR objects matching the filter.  With \fB\fC\-l LIMIT\fR, this
    can be used to page through a large result set.
    <!\-\- XXX is that right? \-\->
.PP
\fB\fC\-s\fR
    Do not execute the query, but instead report the SQL strings that would be
    used to execute the query on the underlying data store.
.PP
See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
the log verbosity and how to locate the remote server.
.SH ENVIRONMENT
.PP
See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
\fB\fCMORAY_URL\fR environment variables.
.SH EXAMPLES
.SH SEE ALSO
.PP
\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR, \fB\fCputobject(1)\fR, \fB\fCgetobject(1)\fR, \fB\fCdelmany(1)\fR,
\fB\fCupdatemany(1)\fR\&.
.SH BUGS
.PP
For the reasons mentioned above, it is generally considered a bug that Moray
allows filter strings to use unindexed fields.  This is likely to change in
future versions.
