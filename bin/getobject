#!/usr/bin/env node
// -*- mode: js -*-
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var cmdutil = require('cmdutil');
var getopt = require('posix-getopt');

var moray = require('../lib');

var prettyPrint = true;


///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'fatal'),
    stream: process.stderr,
    serializers: bunyan.stdSerializers
});



///--- Functions

function usage(msg) {
    if (msg)
        console.error(msg);

    var str = 'usage: ' + path.basename(process.argv[1]);
    str += '[-v] [-s] [-H] [-h host] [-p port] bucket key';
    console.error(str);
    process.exit(1);
}


function parseOptions() {
    var option;
    var opts = {
        host: '127.0.0.1',
        port: 2020
    };
    var parser = new getopt.BasicParser('vsHh:p:', process.argv);
    var tmp;

    if (process.env['MORAY_URL']) {
        var u = url.parse(process.env['MORAY_URL']);
        opts.host = u['hostname'] || opts.host;
        opts.port = parseInt(u['port'], 10) || opts.port;
    }

    while ((option = parser.getopt()) !== undefined && !option.error) {
        switch (option.option) {
        case 'H':
            prettyPrint = false;
            break;

        case 'h':
            opts.host = option.optarg;
            break;

        case 'p':
            opts.port = parseInt(option.optarg, 10);
            break;

        case 's':
            opts.noCache = true;
            break;

        case 'v':
            // Allows us to set -vvv -> this little hackery
            // just ensures that we're never < TRACE
            LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
            if (LOG.level() <= bunyan.DEBUG)
                LOG = LOG.child({src: true});
            break;

        default:
            process.exit(1);
            break;
        }
    }

    if (parser.optind() >= process.argv.length)
        usage('missing required arguments: "bucket"');
    if ((parser.optind() + 1) >= process.argv.length)
        usage('missing required arguments: "key"');

    tmp = process.argv.slice(parser.optind());
    opts.bucket = tmp[0];
    opts.key = tmp[1];

    return (opts);
}



///--- Mainline

var client;
var options = parseOptions();

client = moray.createClient({
    mustCloseBeforeNormalProcessExit: true,
    failFast: true,
    host: options.host,
    log: LOG,
    port: options.port
});

client.on('connect', function onConnect() {
    client.getObject(options.bucket, options.key, { noCache: options.noCache },
        function callback(err, obj) {
            if (err) {
                console.error(err.message);
                process.exit(1);
            }

            if (prettyPrint) {
                console.log(JSON.stringify(obj, null, 2));
            } else {
                console.log(JSON.stringify(obj));
            }
            client.close();
        });
});

client.on('error', cmdutil.fail);
