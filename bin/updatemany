#!/usr/bin/env node
// -*- mode: js -*-
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2017, Joyent, Inc.
 */

var cmdutil = require('cmdutil');
var moray = require('../lib');
var moraycli = require('../lib/cmd');
var VError = require('verror');

var clientOptions, parser, client;
var updateOptions, bucket, filter, changes, p;

cmdutil.configure({
    'usageMessage': 'update objects in Moray matching a filter',
    'synopses': [ moraycli.commonUsage + '[-d data] [-l limit] BUCKET FILTER' ]
});

clientOptions = {};
changes = {};
updateOptions = {};
parser = moraycli.parseCliOptions({
    'argv': process.argv,
    'env': process.env,
    'errstream': process.stderr,
    'extraOptStr': 'd:l:',
    'clientOptions': clientOptions,
    'onUsage': cmdutil.usage,
    'onOption': function (option) {
        switch (option.option) {
        case 'd':
            try {
                changes = JSON.parse(option.optarg);
            } catch (ex) {
                cmdutil.fail(new VError(ex, 'parsing value for -d'));
            }
            break;

        case 'l':
            p = parseInt(option.optarg, 10);
            if (isNaN(p) || p < 0) {
                cmdutil.usage('unsupported value for -l: "%s"', option.optarg);
            }
            updateOptions.limit = p;
            break;

        default:
            cmdutil.usage();
            break;
        }
    }
});

if (parser.optind() >= process.argv.length)
    cmdutil.usage('missing required arguments: "bucket"');
bucket = process.argv[parser.optind()];

if ((parser.optind() + 1) >= process.argv.length)
    cmdutil.usage('missing required arguments: "filter"');
filter = process.argv[parser.optind() + 1];

client = moray.createClient(clientOptions);
client.on('error', cmdutil.fail);
client.on('connect', function onConnect() {
    client.updateObjects(bucket, changes, filter, updateOptions,
        function callback(err, meta) {
            if (err) {
                cmdutil.fail(err);
            }

            console.log(meta);
            client.close();
        });
});
